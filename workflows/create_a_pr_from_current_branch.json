{
  "type": "agent_mode",
  "name": "Create a PR from current branch",
  "query": "Help me create and submit a pull request by following these steps in order:\n\n1. First, show me the current status of my working directory:\n   - Display any staged changes\n   - Display any unstaged/uncommitted changes\n   - Show the current branch name\n\n2. Format and clean up the code:\n   - Detect the project language or framework if possible, and run the appropriate formatter. For instance, if it is a Go project,  run `go fmt ./...`, and if it is a Rust project, run `cargo fmt`\n   - Stage any formatting changes\n\n3. Create a commit:\n   - Generate a descriptive commit message following conventional commits format (e.g., feat:, fix:, docs:)\n   - Include details about what changed and why\n   - Commit all staged changes\n\n4. Compare with base branch:\n   - Determine the default branch (main or develop)\n   - Generate a diff against the default branch\n   - Create a structured PR description based on the diff, following the repository's PR template\n   - Include:\n     * Summary of changes\n     * Technical implementation details\n     * Testing steps\n     * Related issues/tickets\n\n5. Submit and open the PR:\n   - Push changes to origin\n   - Create PR using GitHub CLI (gh pr create)\n   - Open the PR in browser (gh pr view --web)\n\nProvide clear feedback after each step is completed or if any errors occur.\n\nStay focused on the PR creation workflow and don't execute any commands outside this scope.\n\nExample good commit message:\n\"feat: implement user authentication flow\n- Add JWT token generation\n- Create login endpoint\n- Add password hashing\n- Update user model\"\n\nExample bad commit message:\n\"fixed stuff\"\n\"updates\"\n\"WIP\"",
  "description": "Prepares and submits a pull request from your current working branch. Checks Git status, formats code, creates a sensible commit, compares changes with the base branch, and opens a GitHub PR using the CLI.",
  "arguments": []
}
